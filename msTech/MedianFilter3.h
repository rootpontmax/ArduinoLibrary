////////////////////////////////////////////////////////////////////////////////////////////////////
// Simple media filter.                                                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef MEDIAN_FILTER_3_H
#define MEDIAN_FILTER_3_H

#include <assert.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
class CMedianFilter3
{
public:
	CMedianFilter3();

    void    Add( T value );
    T       Get() const;
private:

    T       m_ringBuffer[3];
    int     m_ringPos;
};
////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
CMedianFilter3< T >::CMedianFilter3() :
    m_ringPos( 0 )
{}
////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
void CMedianFilter3< T >::Add( T value )
{
    m_ringBuffer[m_ringPos] = value;
    ++m_ringPos;
    m_ringPos %= 3;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T CMedianFilter3< T >::Get() const
{
    const T& a = m_ringBuffer[0];
    const T& b = m_ringBuffer[1];
    const T& c = m_ringBuffer[2];

    if( (a <= b ) && ( a <= c ) )
        return ( b <= c ) ? b : c;
    if( ( b <= a ) && ( b <= c ) )
        return ( a <= c ) ? a : c;
    return ( a <= b ) ? a : b;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
#endif

